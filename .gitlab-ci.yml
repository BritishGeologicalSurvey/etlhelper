variables:
  POSTGRES_DB: etlhelper
  POSTGRES_USER: etlhelper_user
  POSTGRES_PASSWORD: etlhelper_pw
  POSTGRES_HOST: postgis

# Build stage also runs tests on container and pushes to repository
stages:
  - test
  - package
  - release

services:
  - docker:18-dind
  # Use PostGIS for testing: https://www.hackzine.org/postgis-on-gitlab-ci.html
  - name: mdillon/postgis:11-alpine
    alias: postgis

test:
  tags:
    - docker-builder
    - hwlgitlabrunner
  image: docker
  stage: test
  script:
    # Import test environment variables
    - source ${TEST_ENV_VARS}

    # Resolve PostGIS hostname (necessary because SQLAlchemy can't)
    - export POSTGRES_HOST=$(getent hosts postgis | awk '{ print $1 ; exit }')

    # Login to registry and previous test container
    - >
      docker login -u "$CI_REGISTRY_USER" \
          -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - >
      docker pull "$CI_REGISTRY_IMAGE:test-runner" \
          || true # Don't fail if missing

    # Build new container using cached layers from previous
    - >
      docker build \
        --cache-from  "$CI_REGISTRY_IMAGE:test-runner" \
        --build-arg INSTANT_CLIENT_ZIP=${INSTANT_CLIENT_ZIP} \
        -t "$CI_REGISTRY_IMAGE:test-runner" .

    # Push to repository (for use as cache for next build)
    - docker push "$CI_REGISTRY_IMAGE:test-runner"

    # Run linting and tests
    - >
      docker run \
        "$CI_REGISTRY_IMAGE:test-runner" flake8 etlhelper test
    - >
      docker run \
        -e TEST_PG_HOST=${POSTGRES_HOST} \
        -e TEST_PG_PASSWORD=${POSTGRES_PASSWORD} \
        -e TEST_ORACLE_DBTYPE="${TEST_ORACLE_DBTYPE}" \
        -e TEST_ORACLE_HOST="${TEST_ORACLE_HOST}" \
        -e TEST_ORACLE_PORT="${TEST_ORACLE_PORT}" \
        -e TEST_ORACLE_DBNAME="${TEST_ORACLE_DBNAME}" \
        -e TEST_ORACLE_USER="${TEST_ORACLE_USER}" \
        -e TEST_ORACLE_PASSWORD="${TEST_ORACLE_PASSWORD}" \
        -e TEST_MSSQL_DBTYPE="${TEST_MSSQL_DBTYPE}" \
        -e TEST_MSSQL_DBDRIVER="${TEST_MSSQL_DBDRIVER}" \
        -e TEST_MSSQL_HOST="${TEST_MSSQL_HOST}" \
        -e TEST_MSSQL_PORT="${TEST_MSSQL_PORT}" \
        -e TEST_MSSQL_DBNAME="${TEST_MSSQL_DBNAME}" \
        -e TEST_MSSQL_USER="${TEST_MSSQL_USER}" \
        -e TEST_MSSQL_PASSWORD="${TEST_MSSQL_PASSWORD}" \
        -e TEST_MSSQL_ODBC_DRIVER="${TEST_MSSQL_ODBC_DRIVER}" \
        "$CI_REGISTRY_IMAGE:test-runner" pytest -rsx --cov=etlhelper -vvs test/

package:
  tags:
    - hwlgitlabrunner
  image: "$CI_REGISTRY_IMAGE:test-runner"
  stage: package
  before_script:
  script:
    - git status
    - git diff
    # Build zipped source distribution of module
    - python setup.py sdist --formats=zip bdist_wheel
  artifacts:
    paths:
      - dist/

pypi:
  tags:
    - hwlgitlabrunner
  image: "$CI_REGISTRY_IMAGE:test-runner"
  stage: release
  script:
    - twine upload -u $TWINE_USERNAME -p $TWINE_PASSWORD --verbose "dist/etlhelper-*"
  only:
    - tags
  when: manual
